{"version":3,"sources":["components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/Form/Form.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getContacts","state","contacts","items","getFilter","filter","getFilteredContacts","normalizedFilter","toLowerCase","contact","includes","Form","useState","setState","useSelector","dispatch","useDispatch","nameInputId","telInputId","handleChange","e","currentTarget","value","prevState","reset","className","styles","form","onSubmit","preventDefault","find","alert","contactsActions","label","htmlFor","input","type","pattern","title","required","onChange","button","memo","ContactsList","useEffect","localStorage","setItem","JSON","stringify","length","list","map","item","onClick","onDeleteContact","defaultProps","Filter","target","App","initialStateItems","parse","getItem","createReducer","actions","_","combineReducers","persistConfig","key","storage","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4d733c04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__NmCCL\",\"item\":\"ContactsList_item__wk45h\",\"button\":\"ContactsList_button__2Hwbp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3Zc49\",\"input\":\"Filter_input__1n3Zi\"};","import shortid from \"shortid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contact/Add\", ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\nconst deleteContact = createAction(\"contacts/Delete\");\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\nconst changeFilter = createAction(\"contacts/Filter\");\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getFilteredContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = state.contacts.filter;\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n","import React, { useState, memo } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\nimport { getContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport styles from \"./Form.module.css\";\r\n\r\nconst Form = () => {\r\n  const [state, setState] = useState({ name: \"\", number: \"\" });\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const nameInputId = shortid.generate();\r\n  const telInputId = shortid.generate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (contacts.find(({ name }) => name === state.name)) {\r\n      alert(`${state.name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsActions.addContact(state));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <label className={styles.label} htmlFor={nameInputId}>\r\n        Name\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={state.name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n\r\n      <label className={styles.label} htmlFor={telInputId}>\r\n        Number\r\n        <input\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={state.number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleChange}\r\n          id={telInputId}\r\n        />\r\n      </label>\r\n      <button className={styles.button} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onSubmit: (info) => dispatch(contactsActions.addContact(info)),\r\n// });\r\n\r\nexport default memo(Form);\r\n","import React from \"react\";\r\nimport styles from \"./ContactsList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n// import { connect } from \"react-redux\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getFilteredContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\nimport { useEffect } from \"react\";\r\n\r\nexport default function ContactsList() {\r\n  const contacts = useSelector(getFilteredContacts);\r\n\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = (id) => dispatch(contactsActions.deleteContact(id));\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"items\", JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  return contacts.length === 0 ? (\r\n    <div> No contacts </div>\r\n  ) : (\r\n    <ul className={styles.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={styles.item}>\r\n          {name}: {number}\r\n          <button\r\n            className={styles.button}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nContactsList.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nContactsList.propTypes = {\r\n  onDeleteContact: PropTypes.func,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: getFilteredContacts(items, filter),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React from \"react\";\r\nimport styles from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={styles.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.defaultProps = {\r\n  value: \"\",\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\nexport default Filter;\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import Form from \"./components/Form\";\r\nimport ContactsList from \"./components/ContactsList\";\r\nimport Filter from \"./components/Filter\";\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <h1>Phonebook</h1>\r\n    <Form />\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n    <ContactsList />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-actions\";\r\n\r\nconst initialStateItems = JSON.parse(localStorage.getItem(\"items\")) || [\r\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n];\r\n\r\nconst items = createReducer(initialStateItems, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport App from \"./App\";\r\nimport store from \"../src/redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3PbVD\",\"label\":\"Form_label__2UleV\",\"input\":\"Form_input__30dnH\",\"button\":\"Form_button__3g3BM\"};"],"sourceRoot":""}